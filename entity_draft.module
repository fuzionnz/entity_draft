<?php

/**
 * @file
 * Contains entity_draft.module.
 */

use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityDeleteForm;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function entity_draft_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.entity_draft':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allow saving of entities in draft state.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_draft_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  if (!method_exists($form_object, 'getEntity')) {
    return;
  }

  if ($form_object->getEntity() instanceof ConfigEntityBundleBase &&
    !$form_object instanceof EntityDeleteForm &&
    !$form_object->getEntity()->isNew()) {

    $entity = $form_object->getEntity();

    $form['entity_draft'] = [
      '#type' => 'details',
      '#title' => t('Entity draft'),
      '#group' => 'additional_settings',
      '#weight' => 50,
    ];

    $form['entity_draft']['enable_draft'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable draft support'),
      '#description' => t('Check this to enable draft support for this entity bundle.'),
      '#default_value' => $entity->getThirdPartySetting('entity_draft', 'enable_draft', 0),
    ];
    $form['entity_draft']['enable_draft']['#attributes']['class'][] = 'entity_draft_enabled';

    $form['entity_draft']['entity_draft_unpublished'] = [
      '#type' => 'checkbox',
      '#title' => t('Drafts are unpublished'),
      '#description' => t('Check this to set this entity bundle to unpublished when it is a draft. Note that this requires a status field.'),
      '#default_value' => $entity->getThirdPartySetting('entity_draft', 'entity_draft_unpublished', 1),
      '#states' => [
        'visible' => [
          '.entity_draft_enabled' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['entity_draft']['entity_draft_submit'] = [
      '#type' => 'textfield',
      '#title' => t('Button label'),
      '#description' => t('Label on the button used to save a draft'),
      '#default_value' => $entity->getThirdPartySetting('entity_draft', 'entity_draft_submit', t('Save Draft')),
      '#states' => [
        'visible' => [
          '.entity_draft_enabled' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['entity_draft']['entity_draft_help'] = [
      '#type' => 'textarea',
      '#title' => t('Help message'),
      '#description' => t('Optional help message to show underneath the entity draft button.'),
      '#default_value' => $entity->getThirdPartySetting('entity_draft', 'entity_draft_help', ''),
      '#states' => [
        'visible' => [
          '.entity_draft_enabled' => ['checked' => TRUE],
        ],
      ],
    ];

    $entity_draft_message = $entity->getThirdPartySetting('entity_draft', 'entity_draft_message');
    $form['entity_draft']['entity_draft_message'] = [
      '#type' => 'text_format',
      '#title' => t('Submit message'),
      '#description' => t('Optional message to show on submit.'),
      '#format' => empty($entity_draft_message['format']) ? filter_default_format() : $entity_draft_message['format'],
      '#default_value' => empty($entity_draft_message['value']) ? '' : $entity_draft_message['value'],
      '#states' => [
        'visible' => [
          '.entity_draft_enabled' => ['checked' => TRUE],
        ],
      ],
    ];

    $form['entity_draft']['entity_draft_redirect'] = [
      '#type' => 'textfield',
      '#title' => t('Redirect'),
      '#description' => t('The route to redirect to. Leave blank to reload page.'),
      '#default_value' => $entity->getThirdPartySetting('entity_draft', 'entity_draft_redirect', ''),
    ];

    $form['actions']['submit']['#submit'][] = 'entity_draft_entity_type_submit';
  }
  elseif (isset($form['#entity_builders'])) {
    // @todo a config screen to specify when to add this in.
    entity_draft_entity_edit_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Alter entity edit form.
 */
function entity_draft_entity_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form_display = $form_state->getStorage()['form_display'];

  $bundle = $form_display->getTargetBundle();
  $entity_type = $form_display->getTargetEntityTypeId();

  $entity_type_manager = \Drupal::service('entity_type.manager');
  $bundle_entity_type = $entity_type_manager->getDefinition($entity_type)->get('bundle_entity_type');
  if ($bundle_entity_type === NULL) {
    return;
  }

  $config = $entity_type_manager->getStorage($bundle_entity_type)->load($bundle);

  $form['actions']['draft'] = [
    '#type' => 'submit',
    '#value' => $config->getThirdPartySetting('entity_draft', 'entity_draft_submit'),
    '#weight' => 0,
    '#validate' => ['entity_draft_entity_validate_draft_edit_form'],
    '#submit' => [
      '::submitForm',
      '::save',
      'entity_draft_entity_save_draft_edit_form',
    ],
  ];

  if (!empty($config->getThirdPartySetting('entity_draft', 'entity_draft_help'))) {
    $form['actions']['draft_help_container'] = [
      '#type' => 'fieldset',
      '#weight' => -101,
    ];

    $form['actions']['draft_help_container']['draft_help'] = [
      '#type' => 'item',
      '#description' => $config->getThirdPartySetting('entity_draft', 'entity_draft_help'),
    ];
  }

  $form['actions']['submit']['#submit'][] = 'entity_draft_entity_submit_edit_form';
}

/**
 * Submit entity edit form.
 */
function entity_draft_entity_submit_edit_form(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $entity->set('is_draft', FALSE);
  $entity->save();
}

/**
 * Validate entity draft edit form.
 */
function entity_draft_entity_validate_draft_edit_form(&$form, FormStateInterface $form_state) {
  // Trigger entity validation.
  $form_state->getFormObject()->validateForm($form, $form_state);
  // Errors? No problem!
  $form_state->clearErrors();
}

/**
 * Save entity via the draft button.
 */
function entity_draft_entity_save_draft_edit_form(&$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $form_display = $form_state->getStorage()['form_display'];

  $bundle = $form_display->getTargetBundle();
  $entity_type = $form_display->getTargetEntityTypeId();

  $entity_type_manager = \Drupal::service('entity_type.manager');
  $bundle_entity_type = $entity_type_manager->getDefinition($entity_type)->get('bundle_entity_type');
  $config = $entity_type_manager->getStorage($bundle_entity_type)->load($bundle);

  $entity->set('is_draft', TRUE);
  if ($entity->hasField('status')) {
    $entity->set('status', $config->getThirdPartySetting('entity_draft', 'entity_draft_unpublished'));
  }

  $entity->save();

  $entity_draft_message = $config->getThirdPartySetting('entity_draft', 'entity_draft_message', FALSE);
  if ($entity_draft_message !== FALSE) {
    drupal_set_message(check_markup($entity_draft_message['value'], $entity_draft_message['format']));
  }

  $entity_draft_redirect = $config->getThirdPartySetting('entity_draft', 'entity_draft_redirect', '');
  if (!empty($entity_draft_redirect)) {
    $form_state->setRedirect($entity_draft_redirect);
  }
}

/**
 * Custom entity type form submit handling.
 */
function entity_draft_entity_type_submit(array &$form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $entity->setThirdPartySetting('entity_draft', 'enable_draft', $form_state->getValue('enable_draft'))
    ->setThirdPartySetting('entity_draft', 'entity_draft_unpublished', $form_state->getValue('entity_draft_unpublished'))
    ->setThirdPartySetting('entity_draft', 'entity_draft_submit', $form_state->getValue('entity_draft_submit'))
    ->setThirdPartySetting('entity_draft', 'entity_draft_help', $form_state->getValue('entity_draft_help'))
    ->setThirdPartySetting('entity_draft', 'entity_draft_message', $form_state->getValue('entity_draft_message'))
    ->setThirdPartySetting('entity_draft', 'entity_draft_redirect', $form_state->getValue('entity_draft_redirect'))
    ->save();

  // Set required handling using controlled_fields.
  $config_entity_type = $entity->getEntityType();
  $bundle_of = $config_entity_type->getBundleOf();
  $field_definitions = controlled_fields_fetch_field_definitions($bundle_of, $entity->get('type'));

  $entity_manager = \Drupal::entityManager();
  $entity_form_modes = $entity_manager->getFormModes($bundle_of);
  $valid_form_modes = ['default'];

  foreach ($entity_form_modes as $form_mode_id => $form_mode) {
    $entity_form_display = $entity_manager->getStorage('entity_form_display')->load($bundle_of . '.' . $entity->get('type') . '.' . $form_mode_id);
    if ($entity_form_display !== NULL && $entity_form_display->get('id')) {
      array_push($valid_form_modes, $form_mode_id);
    }
  }

  foreach ($valid_form_modes as $form_mode_id) {
    controlled_fields_enable_form_display($bundle_of, $entity->get('type'), $form_mode_id, $form_state->getValue('enable_draft'));
  }

  controlled_fields_field_config_change_required($field_definitions, $form_state->getValue('enable_draft'));
}

/**
 * Implements hook_entity_base_field_info().
 */
function entity_draft_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Add in is_draft to all bundle enabled entities.
  $entity_manager = \Drupal::entityManager();
  foreach ($entity_manager->getDefinitions() as $entity_type_id => $entity_type_config) {

    $bundle_of = $entity_type_config->get('bundle_of');

    if ($bundle_of == $entity_type->id()) {
      $fields = [];

      $fields['is_draft'] = BaseFieldDefinition::create('boolean')
        ->setLabel(t('Is draft'))
        ->setDescription(t('Whether this entity is currently in draft state.'))
        ->setDefaultValue(FALSE);

      return $fields;
    }
  }
}
